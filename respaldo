class Sale(models.Model):
    cli = models.ForeignKey(Clients, on_delete=models.PROTECT, verbose_name='Cliente')
    date_joined = models.DateField(default=datetime.now, verbose_name='Fecha Venta')
    subtotal = models.DecimalField(default=0.00, max_digits=9, decimal_places=2)
    iva = models.DecimalField(default=0.00, max_digits=9, decimal_places=2)
    total = models.DecimalField(default=0.00, max_digits=9, decimal_places=2)
    pay_method = models.ForeignKey(PayMethods, on_delete=models.PROTECT, verbose_name='MÃ©todo de Pago')


    def __str__(self):
        return self.cli.names

    def toJSON(self):
        item = model_to_dict(self)
        item['cli'] = self.cli.toJSON()
        item['pay_method'] = self.pay_method.toJSON()
        item['subtotal'] = format(self.subtotal, '.2f')
        item['iva'] = format(self.iva, '.2f')
        item['total'] = format(self.total, '.2f')
        item['date_joined'] = self.date_joined.strftime('%Y-%m-%d')
        item['det'] = [i.toJSON() for i in self.detsale_set.all()]
        return item

    class Meta:
        verbose_name = 'Venta'
        verbose_name_plural = 'Ventas'
        ordering = ['id']


class DetSale(models.Model):
    
    sale = models.ForeignKey(Sale, on_delete=models.CASCADE, verbose_name='Venta')
    replacement = models.ForeignKey(Replacement, on_delete=models.CASCADE, verbose_name='Repuesto(s)')
    pay_method = models.ForeignKey(PayMethods, on_delete=models.CASCADE, verbose_name='Medio de Pago')
    price = models.DecimalField(default=0.00, max_digits=9, decimal_places=0, verbose_name='Precio')
    cant = models.IntegerField(default=0, verbose_name='Cantidad')
    subtotal = models.DecimalField(default=0.00, max_digits=9, decimal_places=2, verbose_name='Subtotal')
    


    def __str__(self):
        return self.replacement.name, self.pay_method.name

    def toJSON(self):
        item = model_to_dict(self, exclude=['sale'])
        item['replacement'] = self.replacement.toJSON()
        item['pay_method'] = self.pay_method.toJSON()
        item['price'] = format(self.price, '.2f')
        item['subtotal'] = format(self.subtotal, '.2f')
        return item


    class Meta:
        verbose_name = 'Detalle de Venta'
        verbose_name_plural = 'Detalle de Ventas'
        ordering = ['id']



"""class CotizacionForm(ModelForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for form in self.visible_fields():
            form.field.widget.attrs['class'] = 'form-control'
            form.field.widget.attrs['select'] = 'off'
        self.fields['cli'].widget.attrs['class'] = 'form-control select2'
        self.fields['pay_method'].widget.attrs['class'] = 'form-control select2'

    class Meta:
        model = Sale
        fields = '__all__'
        widgets = {
            'cli': Select(attrs={
                'class': 'form-control select2',
                'style': 'width: 100%'
            }),
            'date_joined': DateInput(
                format='%Y-%m-%d',
                attrs={
                    'value': datetime.now().strftime('%Y-%m-%d'),
                    'autocomplete': 'off',
                    'class': 'form-control datetimepicker-input form-control-md',
                    'id': 'date_joined',
                    'data-target': '#date_joined',
                    'data-toggle': 'datetimepicker',
                    'readonly': True,
                }
            ),
            'iva': TextInput(attrs={
                'class': 'form-control form-control-md',
                'readonly': True
            }),
            'subtotal': TextInput(attrs={
                'readonly': True,
                'class': 'form-control form-control-md',
            }),
            'pay_method': Select(attrs={
                'class': 'form-control select2',
                'style': 'width: 100%'
            }),
            'total': TextInput(attrs={
                'readonly': True,
                'class': 'form-control form-control-md',
            })
        }

    def save(self, comit=True):
        data = {}
        form = super()
        try:
            if form.is_valid():
                instance = form.save()
                data = instance.toJSON()
            else:
                data['error'] = form.errors
        except Exception as e:
            data['error'] = str(e)
        return data


    class SaleForm(ModelForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for form in self.visible_fields():
            form.field.widget.attrs['class'] = 'form-control'
            form.field.widget.attrs['select'] = 'off'
        self.fields['cli'].widget.attrs['class'] = 'form-control select2'
        self.fields['pay_method'].widget.attrs['class'] = 'form-control select2'

    class Meta:
        model = Sale
        fields = '__all__'
        widgets = {
            'cli': Select(attrs={
                'class': 'form-control select2',
                'style': 'width: 100%'
            }),
            'date_joined': DateInput(
                format='%Y-%m-%d',
                attrs={
                    'value': datetime.now().strftime('%Y-%m-%d'),
                    'autocomplete': 'off',
                    'class': 'form-control datetimepicker-input form-control-md',
                    'id': 'date_joined',
                    'data-target': '#date_joined',
                    'data-toggle': 'datetimepicker',
                    'readonly': True,
                }
            ),
            'iva': TextInput(attrs={
                'class': 'form-control form-control-md',
                'readonly': True
            }),
            'subtotal': TextInput(attrs={
                'readonly': True,
                'class': 'form-control form-control-md',
            }),
            'pay_method': Select(attrs={
                'class': 'form-control select2',
                'style': 'width: 100%'
            }),
            'total': TextInput(attrs={
                'readonly': True,
                'class': 'form-control form-control-md',
            })
        }

    def save(self, comit=True):
        data = {}
        form = super()
        try:
            if form.is_valid():
                instance = form.save()
                data = instance.toJSON()
            else:
                data['error'] = form.errors
        except Exception as e:
            data['error'] = str(e)
        return data"""
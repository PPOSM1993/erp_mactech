
"""class CotizacionUpdateView(LoginRequiredMixin, ValidatePermissionRequiredMixin, UpdateView):
    model = Cotizacion
    form_class = CotizacionForm
    template_name = 'cotizacion/create.html'
    success_url = reverse_lazy('erp:cotizacion_list')
    permission_required = 'erp.change_cotizacion'
    url_redirect = success_url
    

    @method_decorator(csrf_exempt)
    @method_decorator(login_required)
    def dispatch(self, request, *args, **kwargs):
        self.object = self.get_object()
        return super().dispatch(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        data = {}
        try:
            action = request.POST['action']
            if action == 'search_replacements':
                data = []
                repl = Replacement.objects.filter(
                    name__icontains=request.POST['term'], stock__gt=0)[0:10]
                for i in repl:
                    item = i.toJSON()
                    item['value'] = i.name
                    data.append(item)
                    
            elif action == 'edit':
                with transaction.atomic():
                    vents = json.loads(request.POST['vents'])
                    cotizacion = self.get_object()
                    cotizacion.date_joined = vents['date_joined']
                    cotizacion.cli_id = vents['cli']
                    cotizacion.subtotal = float(vents['subtotal'])
                    cotizacion.iva = float(vents['iva'])
                    cotizacion.total = float(vents['total'])
                    cotizacion.save()
                    cotizacion.detcotizacion_set.all().delete()
                    for i in vents['replacement']:
                        det = DetCotizacion()
                        det.cotizacion_id = cotizacion.id
                        det.repl_id = i['id']
                        det.stock = int(i['stock'])
                        det.price = float(i['pvp'])
                        det.subtotal = float(i['subtotal'])
                        det.save()
                    data = {'id': cotizacion.id}

            elif action == 'search_clients':
                data = []
                term = request.POST['term']
                clients = Clients.objects.filter(
                    Q(names__icontains=term) | Q(dni__icontains=term))[0:10]
                for i in clients:
                    item = i.toJSON()
                    item['text'] = i.get_full_name()
                    data.append(item)
            elif action == 'create_client':
                with transaction.atomic():
                    frmClient = ClientsForm(request.POST)
                    data = frmClient.save()
                pass    
            else:
                data['error'] = 'No ha ingresado a ninguna opción'
        except Exception as e:
            data['error'] = str(e)
        return JsonResponse(data, safe=False)

    def get_details_replacement(self):
        data = []
        try:
            for i in DetCotizacion.objects.filter(cotizacion_id=self.get_object().id):
                item = i.repl.toJSON()
                item['stock'] = i.stock
                data.append(item)
        except:
        return data

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Actualizar Cotización'
        context['entity'] = 'Cotizaciones'
        context['list_url'] = self.success_url
        context['action'] = 'edit'
        context['det'] = json.dumps(self.get_details_replacement())
        return context"""


class CotizacionDeleteView(LoginRequiredMixin, ValidatePermissionRequiredMixin, DeleteView):
    model = Cotizacion
    template_name = 'cotizacion/delete.html'
    success_url = reverse_lazy('erp:cotizacion_list')
    permission_required = 'erp.delete_cotizacion'
    url_redirect = success_url

    def dispatch(self, request, *args, **kwargs):
        self.object = self.get_object()
        return super().dispatch(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        data = {}
        try:
            self.object.delete()
        except Exception as e:
            data['error'] = str(e)
        return JsonResponse(data)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Eliminación Cotización'
        context['entity'] = 'Cotización'
        context['list_url'] = self.success_url
        return context